[{"C:\\tests-app\\src\\redux\\testsSlice.js":"1","C:\\tests-app\\src\\sagas\\index.js":"2","C:\\tests-app\\src\\redux\\giveQuestion.js":"3","C:\\tests-app\\src\\redux\\modifyTests.js":"4","C:\\tests-app\\src\\redux\\redirectQuestions.js":"5","C:\\tests-app\\src\\reportWebVitals.js":"6","C:\\tests-app\\src\\pages\\MainPage.jsx":"7","C:\\tests-app\\src\\App.jsx":"8","C:\\tests-app\\src\\components\\Sidebar\\Sidebar.jsx":"9"},{"size":2572,"mtime":1616918372568,"results":"10","hashOfConfig":"11"},{"size":51,"mtime":1616918372570,"results":"12","hashOfConfig":"11"},{"size":612,"mtime":1616918372565,"results":"13","hashOfConfig":"11"},{"size":4790,"mtime":1616918372566,"results":"14","hashOfConfig":"11"},{"size":792,"mtime":1616918372566,"results":"15","hashOfConfig":"11"},{"size":375,"mtime":1616918372569,"results":"16","hashOfConfig":"11"},{"size":739,"mtime":1617032997777,"results":"17","hashOfConfig":"11"},{"size":1015,"mtime":1616941585470,"results":"18","hashOfConfig":"11"},{"size":4250,"mtime":1617032232165,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22","usedDeprecatedRules":"23"},"f2b2oj",{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\tests-app\\src\\redux\\testsSlice.js",["40","41"],"import { createSlice } from \"@reduxjs/toolkit\";\r\nimport tests from \"./modifyTests\";\r\nimport questionsByAnswers from \"./giveQuestion\";\r\nimport redirectQuestion from \"./redirectQuestions\";\r\nimport { cutStrId, getId } from \"../helpers/cutStrId\";\r\n\r\nconst initialState = {\r\n  tests,\r\n  questionKey: \"\",\r\n  currentQuestion: tests[Object.keys(tests)[0]],\r\n  questionsByAnswers,\r\n  questionId: 0,\r\n  redirectQuestion,\r\n  saveAnswers: [],\r\n  allBalls: 0\r\n};\r\n\r\nconst testsSlice = createSlice({\r\n  name: \"tests\",\r\n  initialState,\r\n  reducers: {\r\n    setQuestionKey: (state, action) => {\r\n      state.questionId = action.payload.questionId;\r\n      state.currentQuestion = tests;\r\n      state.questionKey = Object.keys(tests)[state.questionId];\r\n    },\r\n    setRedirect: (state, action) => {\r\n      state.currentQuestion = redirectQuestion[action.payload];\r\n    },\r\n    setRedirectQuestion: (state, action) => {\r\n      state.currentQuestion = state.tests[action.payload];\r\n    },\r\n    saveAnswer: (state, action) => {\r\n      const answer = action.payload;\r\n      state.saveAnswers.push(answer);\r\n    },\r\n    cutSaveAnswers: (state, action) => {\r\n      const question = action.payload;\r\n      // const indexAnswer = state.saveAnswers.findIndex((answer) => {\r\n      //   return getId(answer.id) === getId(question);\r\n      // });\r\n    },\r\n    setAccessQuestion: (state, action) => {\r\n      const questionKey = action.payload;\r\n      state.currentQuestion = tests[questionKey];\r\n      const arrQuestion = tests[questionKey].title.split(\" \");\r\n      arrQuestion.forEach((str, index) => {\r\n        if (cutStrId(str)) {\r\n          const findSaveAnswer = state.saveAnswers.find(\r\n            (answer) => answer.id === str\r\n          );\r\n          arrQuestion[index] = findSaveAnswer.value;\r\n          state.currentQuestion = {\r\n            ...state.currentQuestion,\r\n            title: arrQuestion.join(\" \")\r\n          };\r\n        }\r\n      });\r\n    }\r\n  }\r\n});\r\n\r\nexport const {\r\n  saveAnswer,\r\n  cutSaveAnswers,\r\n  setQuestionKey,\r\n  setAccessQuestion,\r\n  setRedirect,\r\n  setRedirectQuestion\r\n} = testsSlice.actions;\r\n\r\nexport const selectTests = (state) => state.tests.tests;\r\nexport const selectQuestion = (state) => state.tests.currentQuestion;\r\nexport const selectAccessQuestions = (state) => state.tests.questionsByAnswers;\r\nexport const selectSaveAnswers = (state) => state.tests.saveAnswers;\r\nexport const selectQuestionKey = (state) => state.tests.questionKey;\r\nexport const selectRedirectQuestions = (state) => state.tests.redirectQuestion;\r\n\r\nexport default testsSlice.reducer;\r\n",["42","43"],"C:\\tests-app\\src\\sagas\\index.js",[],"C:\\tests-app\\src\\redux\\giveQuestion.js",[],"C:\\tests-app\\src\\redux\\modifyTests.js",[],"C:\\tests-app\\src\\redux\\redirectQuestions.js",[],"C:\\tests-app\\src\\reportWebVitals.js",[],"C:\\tests-app\\src\\pages\\MainPage.jsx",[],"C:\\tests-app\\src\\App.jsx",["44","45"],"C:\\tests-app\\src\\components\\Sidebar\\Sidebar.jsx",[],{"ruleId":"46","severity":1,"message":"47","line":5,"column":20,"nodeType":"48","messageId":"49","endLine":5,"endColumn":25},{"ruleId":"46","severity":1,"message":"50","line":38,"column":13,"nodeType":"48","messageId":"49","endLine":38,"endColumn":21},{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","replacedBy":"54"},{"ruleId":"46","severity":1,"message":"55","line":1,"column":17,"nodeType":"48","messageId":"49","endLine":1,"endColumn":26},{"ruleId":"46","severity":1,"message":"56","line":1,"column":28,"nodeType":"48","messageId":"49","endLine":1,"endColumn":36},"no-unused-vars","'getId' is defined but never used.","Identifier","unusedVar","'question' is assigned a value but never used.","no-native-reassign",["57"],"no-negated-in-lhs",["58"],"'useEffect' is defined but never used.","'useState' is defined but never used.","no-global-assign","no-unsafe-negation"]